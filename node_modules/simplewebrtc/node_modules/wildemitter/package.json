{
  "name": "wildemitter",
  "version": "0.0.5",
  "author": {
    "name": "Henrik Joreteg",
    "email": "henrik@andyet.net"
  },
  "contributors": [
    {
      "name": "Lance Stout",
      "email": "lance@andyet.net"
    }
  ],
  "description": "A super lightweight EventEmitter similar to what comes in Node.js, but with a support for wildcard events '*' and grouped handlers",
  "repository": {
    "type": "git",
    "url": "https://github.com/HenrikJoreteg/wildemitter.git"
  },
  "devDependencies": {
    "mustache": "",
    "yetify": "",
    "colors": ""
  },
  "keywords": [
    "events",
    "emitter",
    "browser"
  ],
  "main": "wildemitter.js",
  "readme": "# WildEmitter - A lightweight event emitter that supports wildcard handlers\n\n## What's an event emitter?\nIf you've ever listened for a click event in a browser you've used an emitter. But, user interaction isn't the only thing that can trigger an event worth listening to. You can also make other objects capable of emitting events. That's what wildemitter is for. You can extend your objects with it so that you can emit events from them and register handlers on them. This pattern helps you write more re-usable code becaause your objct doen't have to know how it's going to be used. It can simply emit events any time something happens that other code *may* be interested in.\n\nYou'll see this type of pattern a lot in node.js. Where lots of things in the standard libraries inherit from EventEmitter and emit various events to indicate progress, errors, completion, etc.\n\nSo, why make another one? Aren't there others already?\n\nWell, yes there are, but not quite what I wanted. This one is largely based on the emitter in @visionmedia's UIKit. So, much props to TJ for that. But there were a few more things I wanted. Specifically the following:\n- Super lightweight\n- Support for browser/node.js (browser use requires a CommonJS wrapper of some kind, like Stitch or Browserify)\n- Support for wildcard handlers (`*` or `something*`)\n- Support for grouping registered handlers and aun unbinding them all by their group name. This is really handy when, for example, you want unbind all handlers associated with a given \"sub-page\" within a single page app. \n\n##How do I use it?\n\n```js\nvar Emitter = require('./wildemitter');\n\n// the example object we're making\nfunction Fruit(name) {\n    this.name = name;\n    \n    // call emitter with this context\n    Emitter.call(this);\n}\n\n// inherit from Emitter\nFruit.prototype = new Emitter;\n\n// a function that emits an events when called\nFruit.prototype.test = function () {\n    this.emit('test', this.name);\n};\n\n// set up some test fruits\nvar apple = new Fruit('apple');\n\napple.on('*', function () {\n    console.log('\"*\" handler called', arguments);\n});\n\napple.on('te*', function () {\n    console.log('\"te*\" handler called', arguments);\n});\n\napple.on('test', function () {\n    console.log('\"test\" handler called', arguments);\n});\n\n// calling the method that emits events.\napple.test();\n\n// it should write the following the log:\n/*\n\"test\" handler called { '0': 'apple' }\n\"*\" handler called { '0': 'test', '1': 'apple' }\n\"te*\" handler called { '0': 'test', '1': 'apple' }\n*/\n\n// this will remove any handlers explicitly listening for 'test' events.\napple.off('test');\n\n// calling our method again would this time only call the two wildcard handlers\n// producing the following output\n/*\n\"*\" handler called { '0': 'test', '1': 'apple' }\n\"te*\" handler called { '0': 'test', '1': 'apple' }\n*/\n\n// grouped handlers example, we'll create another fruit\nvar orange = new Fruit('orange');\n\n// In this case \"today\" is the name of the group.\n// here we'll bind some handlers that all pass 'today'\n// as the group name\norange.on('test', 'today', someHandler);\norange.on('someOtherEvent', 'today', someHandler);\norange.on('*', 'today', someHandler);\n\n// we can now unbind all three of those handlers like this\norange.releaseGroup('today');\n```\n\n## Including\nEmitters are often something you want to be able to include in another lib. There's also file called wildemitter-bare.js that doesn't have any export mechanism.\n\n## Testing\nYou can run the tests with `nodeunit` by running: `nodeunit test.js`\n\n## Credits\n\nWritten by [@HenrikJoreteg](http://twitter.com/henrikjoreteg) inspired by TJ's emitter component. \n\nContributors:\n\n- [Lance Stout](http://github.com/legastero)\n\n##License\nMIT\n\nIf you like this follow [@HenrikJoreteg](http://twitter.com/henrikjoreteg) on twitter.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/HenrikJoreteg/wildemitter/issues"
  },
  "homepage": "https://github.com/HenrikJoreteg/wildemitter",
  "_id": "wildemitter@0.0.5",
  "_shasum": "0a542509ed5b75a6241e7165d5ffb5d79bdf1f7c",
  "_from": "wildemitter@0.0.5",
  "_resolved": "https://registry.npmjs.org/wildemitter/-/wildemitter-0.0.5.tgz"
}
