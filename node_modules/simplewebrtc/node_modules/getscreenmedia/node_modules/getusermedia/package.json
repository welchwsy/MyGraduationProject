{
  "name": "getusermedia",
  "version": "0.2.0",
  "description": "cross-browser getUserMedia shim with node.js style error-first API.",
  "main": "getusermedia.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/HenrikJoreteg/getUserMedia"
  },
  "keywords": [
    "browser",
    "getUserMedia",
    "WebRTC"
  ],
  "author": {
    "name": "Henrik Joreteg",
    "email": "henrik@andyet.net"
  },
  "license": "MIT",
  "devDependencies": {
    "browserify": "2.x"
  },
  "readme": "# getUserMedia\n\n## What is this?\n\nA tiny browser module that gives us a simple API for getting access to a user's camera or microphone by wrapping the `navigator.getUserMedia` API in modern browsers.\n\nThis is important because as of right now, all browsers return errors differently. More on that below.\n\nThis lib also gracefully handles the lack of support in a browser. So you never have to check first (see error handling below).\n\nIt gives us a cleaner node.js-style, error-first API and cross-browser handling. No browser support checking necessary, lack of support is treated in the same way as when the user rejects the request: the callback gets passed an error as the first argument.\n\nSuitable for use with browserify/CommonJS on the client. \n\nIf you're not using browserify or you want AMD support use `getusermedia.bundle.js`.\n\n\n\n## Installing\n\n```\nnpm install getusermedia\n```\n\n## How to use it\n\n\nWith this helper it's clean/simple to get access to a user's camera, mic, etc.\n\n```js\nvar getUserMedia = require('getusermedia');\n\ngetUserMedia(function (err, stream) {\n    // if the browser doesn't support user media\n    // or the user says \"no\" the error gets passed\n    // as the first argument.\n    if (err) {\n       console.log('failed');\n    } else {\n       console.log('got a stream', stream);  \n    }\n});\n```\n\nPassing in options is optional. It defaults to `{video: true, audio: true}`;\n\n```js\n// optionally pass constraints as the first argument\n// they just passed through.\ngetUserMedia({video: true, audio: false}, function (err, stream) { ... });\n```\n\n\n## Why? Because it's super ugly without this tool\n\n```js\n// first deal with browser prefixes\nvar getUserMedia = navigator.getUserMedia || \n    navigator.mozGetUserMedia || \n    navigator.webkitGetUserMedia;\n\n// make sure it's supported and bind to navigator\nif (getUserMedia) {\n    getUserMedia = getUserMedia.bind(navigator);\n} else {\n    // have to figure out how to handle the error somehow\n}\n\n// then deal with a weird, positional error handling API\ngetUserMedia(\n    // media constraints\n    {video: true, audio: true}, \n    // success callback\n    function (stream) {\n        // gets stream if successful\n    }, \n    // error callback\n    function (error) {\n        // called if failed to get media\n    }\n)\n```\n\n\n## Handling errors (summary)\n\nAll failed calls to `getusermedia` in this library will return an error object (of type `NavigatorUserMediaError`) as the first argument to the callback. All will have a `.name` attribute of one of the following strings.\n\n- `\"NOT_SUPPORTED\"` (for cases where a browser doesn't support `getUserMedia`.)\n- `\"PERMISSION_DENIED\"`\n- `\"CONSTRAINT_NOT_SATISFIED\"`\n\n\n## More about errors\n\nAs of this writing all browsers handle errors differently. Firefox calls the error callback with a string, Chrome with an error object. \n\nNeither follow [the spec](http://dev.w3.org/2011/webrtc/editor/getusermedia.html#navigatorusermediaerror-and-navigatorusermediaerrorcallback) which says it should be an error object with an appropriate `.name` attribute.\n\nAccording to the spec all errors should be an error object of type `NavigatorUserMediaError`. With a `.name` attribute of either: \n\n- `\"PERMISSION_DENIED\"`\n- `\"CONSTRAINT_NOT_SATISFIED\"`\n\nAlso, it sucks to have to test for capability before calling getUserMedia. This lib solves that too. So you still get an appropriate error object back with a `.name` of `\"NOT_SUPPORTED_ERROR\"` which is the same as what the spec says to do if a constraint is requested but not supported. For example requesting video/audio when you only have a microphone in a browser that still supports `getUserMedia`. \n\nIn this library we add one more:\n\n- `\"NOT_SUPPORTED\"` for cases where a browser doesn't support `getUserMedia`.\n\n\n## License\n\nMIT\n\n## Created By\n\nIf you like this, follow: [@HenrikJoreteg](http://twitter.com/henrikjoreteg) on twitter.\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/HenrikJoreteg/getUserMedia/issues"
  },
  "homepage": "https://github.com/HenrikJoreteg/getUserMedia",
  "_id": "getusermedia@0.2.0",
  "_shasum": "ee1e87b08243ef25259b29b5d2f24ac44d62696f",
  "_from": "getusermedia@0.2.0",
  "_resolved": "https://registry.npmjs.org/getusermedia/-/getusermedia-0.2.0.tgz"
}
